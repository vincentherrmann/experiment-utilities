import torch

from experiment_utilities.trees import tree_flatten, tree_fill, tree_map, second_to_last_level
from experiment_utilities.memory import TreeMemory
from experiment_utilities.trees import tree_map

tree1 = [[[3, 5, 6],
          [1, 7]],
         [4, 5],
         8]

tree2 = [
    {"foo": (4,
             [2, 3]),
     "bar": [5, {1: 34,
                 's': 6}]
     },
    [2, 7, (8, 4)]
]


def test_tree_flatten():
    leaves, structure = tree_flatten(tree1)
    filled_tree = tree_fill(leaves, structure)

    assert filled_tree == tree1

    leaves, structure = tree_flatten(tree2)
    filled_tree = tree_fill(leaves, structure)
    assert filled_tree == tree2


def test_tree_map():
    processed_tree = tree_map(f=lambda x: x+1, tree=tree2)
    assert processed_tree[0]["foo"][0] == 5
    assert processed_tree[1][1] == 8

    added_tree = tree_map(f=lambda x, y, z: x + y - z, tree=tree2, rest=(processed_tree, tree2))
    assert added_tree[0]["foo"][0] == 5
    assert added_tree[1][1] == 8
    pass

def test_tree_memory():
    shape_tree = {"parameters": ((10, 5),
                                 (7, 3)),
                  "reward": (1,),
                  "observations": (4,),
                  "test": [(2, 3), (7, 1, 5)]}
    memory = TreeMemory(size=20, shape_tree=shape_tree)

    for i in range(30):
        data_tree = tree_map(lambda shape: torch.rand(list(shape)),
                                    tree=shape_tree, is_leaf=memory.is_leaf)
        memory.store(data_tree)

    data_tree = tree_map(lambda shape: torch.rand([15] + list(shape)),
                         tree=shape_tree, is_leaf=memory.is_leaf)
    memory.store_multiple(data_tree)

    tree_batch = memory.sample_batch(8)
    tree_seq = memory.get_sequence(17, 10)
    pass


def test_second_to_last_map():
    t = {'noninteractive': {1: {13: -0.04400422051548958,
   12: -0.03927963227033615,
   11: -0.042324259877204895,
   10: -0.04183892533183098,
   9: -0.04456198960542679,
   8: -0.036693282425403595,
   7: -0.040836401283741,
   6: -0.040935687720775604,
   5: -0.03940039128065109,
   4: -0.041907899081707,
   3: -0.02375010773539543,
   2: -0.04163811355829239,
   1: -0.02433217316865921},
  8: {4: -0.03088834136724472,
   5: -0.03271752595901489,
   3: -0.01713617518544197,
   2: -0.017099175602197647,
   1: -0.03415502607822418},
  4: {5: -0.03795577585697174,
   4: -0.017447980120778084,
   3: -0.03651556000113487,
   1: -0.034270744770765305},
  2: {4: -0.042200133204460144,
   3: -0.035533297806978226,
   2: -0.02494361810386181,
   1: -0.02408561296761036}},
 'interactive': {8: {15: -0.0015917043201625347,
   14: -0.0015751178143545985,
   13: -0.024661138653755188,
   12: -0.04005829617381096,
   11: -0.001399351516738534,
   10: -0.0013755469117313623,
   9: -0.02045123092830181,
   8: -0.0027035328093916178,
   7: -0.001866426202468574,
   6: -0.0015700164949521422,
   5: -0.0018188311951234937,
   4: -0.0014805829850956798,
   3: -0.001583515084348619,
   2: -0.029766224324703217,
   1: -0.03403467684984207},
  4: {15: -0.03744897246360779,
   14: -0.0016392138786613941,
   13: -0.034731559455394745,
   12: -0.001583858160302043,
   11: -0.0015847044996917248,
   10: -0.0015091444365680218,
   9: -0.0016606019344180822,
   7: -0.0032690211664885283,
   8: -0.03892197832465172,
   6: -0.04122459888458252,
   5: -0.0015546107897534966,
   4: -0.0016395197017118335,
   3: -0.0019514787709340453,
   2: -0.03965325653553009,
   1: -0.03525688871741295},
  2: {15: -0.0015346069121733308,
   12: -0.0013933074660599232,
   14: -0.001437663333490491,
   13: -0.0014779627090319991,
   11: -0.0017320713959634304,
   8: -0.001602431759238243,
   10: -0.0016786495689302683,
   7: -0.0447455495595932,
   6: -0.04247665777802467,
   9: -0.04049784317612648,
   4: -0.04210904985666275,
   5: -0.001364628435112536,
   3: -0.0015683476813137531,
   2: -0.041492242366075516,
   1: -0.041491858661174774},
  1: {15: -0.03608974069356918,
   14: -0.0015882673906162381,
   12: -0.04460597410798073,
   11: -0.0016057163011282682,
   13: -0.03594698756933212,
   7: -0.03287216275930405,
   6: -0.0014647750649601221,
   9: -0.04352191835641861,
   8: -0.0016063801012933254,
   10: -0.001549365697428584,
   5: -0.006297199986875057,
   4: -0.0015883779851719737,
   2: -0.0015949776861816645,
   1: -0.044952090829610825,
   3: -0.011237245053052902}}}
    tm = tree_map(lambda x: list(x.values()),
                                 t,
                         is_leaf=child_is_leaf)